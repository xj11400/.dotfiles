#!/bin/bash

# XJ Hsu
#
# modify form :
# https://github.com/decors/fish-colors/blob/master/completions/colors.fish
# ================================================================================

function colors::help(){
    echo 'Usage: colors [option]'
    echo
    echo 'Available Options:'
    echo '  --help        Show this help'
    #echo '  --examples    Display fish syntax highlighting examples'
    #echo '  --variables   Display fish syntax highlighting variables'
    echo '  --graphic     Display ANSI graphic mode'
    echo '  --ansi        Display ANSI colors table (default option)'
    echo '  --aixterm     Display aixterm high intensity colors table'
    echo '  --256colors   Display 256 colors table'
    echo '  --256hex      Display 256 colors table in hex'
}

function colors::ansi(){
        text='gYw'
    
        echo ""
        echo -e -n "\e[1mANSI Standard Colors\e[0m :\n"
        echo -e -n "  foreground: ESC[{\e[38;5;196m30-37\e[0m}m, bright foreground: ESC[1;{\e[38;5;196m30-37\e[0m}m\n"
        echo -e -n "  background: ESC[{\e[38;5;196m40-47\e[0m}m\n"
    
        echo -e -n "\n     "
        
        background=( '40m' '41m' '42m' '43m' '44m' '45m' '46m' '47m')
        echo -n "         "
        for BG in "${background[@]}"
        do
           echo -e -n "   $BG  "
        done
        echo ""
        
        foregrounds=('m' '1m' '30m' '1;30m' '31m' '1;31m' '32m' '1;32m' '33m' '1;33m' '34m' '1;34m' '35m' '1;35m' '36m' '1;36m' '37m' '1;37m')
    
        for FG in "${foregrounds[@]}"
        do
            #echo -en " $FG \t\e[$FG  $text  " 
            #printf " %5s \e[$FG  $text  " $FG 
            printf " %5s \e[$FG  $text  " $FG 
            for BG in "${background[@]}"
            do
                #echo -e -n " \e[$FG\e[$BG  $text  \e[0m"
                printf " \e[$FG\e[$BG  $text  \e[0m"
            done
            printf "\n"
        done
}
 
function colors::aixterm(){
    text='gYw'

    echo
    echo -e -n "\e[1mHigh Intensity Colors (aixterm)\e[0m :\n"
    echo -e -n "  foreground: ESC[{\e[38;5;196m90-97\e[0m}m\n"
    echo -e -n "  background: ESC[{\e[38;5;196m100-107\e[0m}m\n"

    echo -e -n "\n     "

    background=('100m' '101m' '102m' '103m' '104m' '105m' '106m' '107m')

    printf "%10s" 
    for BG in "${background[@]}"
    do
       printf "%6s%2s" $BG
    done
    echo ""

    foregrounds=('90m' '91m' '92m' '93m' '94m' '95m' '96m' '97m')

    for FG in "${foregrounds[@]}"
    do
        printf " %5s \e[$FG  $text  " $FG 
        for BG in "${background[@]}"
        do
            printf " \e[$FG\e[$BG  $text  \e[0m"
        done
        printf "\n"
    done
}

function colors::256-colors(){

    echo ""
    echo -e -n "\e[1m256 Colors\e[0m :\n"
    echo -e -n "  foreground: ESC[38;5;{\e[38;5;196m0-255\e[0m}m\n"
    echo -e -n "  background: ESC[48;5;{\e[38;5;196m0-255\e[0m}m\n"

    # standard colors
    echo ""
    echo -e " \e[1mStandard Colors\e[0m :"
    for c in $(seq 0 15)
    do
        bg=$(printf "48;5;%dm" $c)
        printf " \e[%s %3s \e[0m" $bg $c
        if [ "$c" = '7' ];then
            echo
        fi
    done
    echo ""

    # 216 colors
    echo
    echo -e " \e[1m216 Colors\e[0m :"
    for v in $(seq 16 12 231)
    do
        for h in $(seq $v 1 $(($v+11)))
        do
            bg=$(printf "48;5;%dm" $h)
            printf " \e[%s %3s \e[0m" $bg $h
        done
        echo ""
    done
    echo ""

    echo -e " \e[1mGrayscale Colors\e[0m :"
    for c in $(seq 232 255)
    do
        bg=$(printf "48;5;%dm" $c)
        printf " \e[%s %3s \e[0m" $bg $c
        if [ "$c" = '243' ];then
            echo
        fi
    done
    echo -e "\n"

}

function colors::256-hex(){

    echo ""
    echo -e -n "\e[1m256 Colors\e[0m :\n"
    echo -e -n "  foreground: ESC[38;5;{\e[38;5;196m00-ff\e[0m}m\n"
    echo -e -n "  background: ESC[48;5;{\e[38;5;196m00-ff\e[0m}m\n"

    # standard colors
    echo ""
    echo -e " \e[1mStandard Colors\e[0m :"
    for c in $(seq 0 15)
    do
        bg=$(printf "48;5;%dm" $c)
        printf " \e[%s %02X \e[0m" $bg $c
        if [ "$c" = '7' ];then
            echo
        fi
    done
    echo ""

    # 216 colors
    echo
    echo -e " \e[1m216 Colors\e[0m :"
    for v in $(seq 16 12 231)
    do
        for h in $(seq $v 1 $(($v+11)))
        do
            bg=$(printf "48;5;%dm" $h)
            printf " \e[%s %2X \e[0m" $bg $h
        done
        echo ""
    done
    echo ""

    echo -e " \e[1mGrayscale Colors\e[0m :"
    for c in $(seq 232 255)
    do
        bg=$(printf "48;5;%dm" $c)
        printf " \e[%s %2X \e[0m" $bg $c
        if [ "$c" = '243' ];then
            echo
        fi
    done
    echo -e "\n"

}

function colors::graphic(){
    echo ""
    echo -e -n "\e[1mANSI Graphic\e[0m :\n"
    echo -e -n "  ESC[{\e[38;5;196m0-9\e[0m};{...}m\n"
    echo ""

    printf "   | %10s   |  %8s     | %13s\n" "ESC Code" "Reset" "Description"
    printf " - | %12s | %13s | %15s\n" "------------" "-------------" "---------------"
    printf "\e[0m X \e[0m|  %8s    |   %8s    |    %s\n" "ESC[0m" " " "reset all modes (styles and colors)"
    printf "\e[1m X \e[0m|  %8s    |   %8s    |    %s\n" "ESC[1m" "ESC[22m" "set bold mode."
    printf "\e[2m X \e[0m|  %8s    |   %8s    |    %s\n" "ESC[2m" "ESC[22m" "set dim/faint mode."
    printf "\e[3m X \e[0m|  %8s    |   %8s    |    %s\n" "ESC[3m" "ESC[23m" "set italic mode."
    printf "\e[4m X \e[0m|  %8s    |   %8s    |    %s\n" "ESC[4m" "ESC[24m" "set underline mode."
    printf "\e[5m X \e[0m|  %8s    |   %8s    |    %s\n" "ESC[5m" "ESC[25m" "set blinking mode"
    #printf "\e[6m X \e[0m|  %8s    |   %8s    |    %s\n" "ESC[6m" "ESC[26m" ""
    printf "\e[7m X \e[0m|  %8s    |   %8s    |    %s\n" "ESC[7m" "ESC[27m" "set inverse/reverse mode"
    printf "\e[8m X \e[0m|  %8s    |   %8s    |    %s\n" "ESC[8m" "ESC[28m" "set hidden/invisible mode"
    printf "\e[9m X \e[0m|  %8s    |   %8s    |    %s\n" "ESC[9m" "ESC[29m" "set strikethrough mode."

    echo ""
    echo "Note: Some terminals may not support some of the graphic mode sequences listed above."
    echo "Note: Both dim and bold modes are reset with the ESC[22m sequence. The ESC[21m sequence is a non-specified sequence for double underline mode and only work in some terminals and is reset with ESC[24m."
}
 
## function colors::examples(){
## 
##     set -l desc_color "yellow --bold"
## 
##     function __dummy_prompt
##         __printc "$fish_color_cwd" "/h/foo"
##         __printc normal "> "
##     end
## 
##     function __clear_newline
##         set_color -b normal; printf "\n"
##     end
## 
##     __printc "$desc_color" "\nValid commmand\n"
##     __dummy_prompt
##     __printc "$fish_color_command" "command"
##     __clear_newline
## 
##     __printc "$desc_color" "\nInvalid commmand\n"
##     __dummy_prompt
##     __printc "$fish_color_error" "comaand"
##     __clear_newline
## 
##     __printc "$desc_color" "\nParameters (normal, valid path)\n"
##     __dummy_prompt
##     __printc "$fish_color_command" "git"
##     __printc "normal" " "
##     __printc "$fish_color_param" "add"
##     __printc "normal" " "
##     set_color $fish_color_param; set_color $fish_color_valid_path; printf "spec/"
##     __clear_newline
## 
##     __printc "$desc_color" "\nParameters (quote)\n"
##     __dummy_prompt
##     __printc "$fish_color_command" "printf"
##     __printc "normal" " "
##     __printc "$fish_color_quote" "\"%%s\\\n\""
##     __clear_newline
## 
##     __printc "$desc_color" "\nAutosuggestion\n"
##     __dummy_prompt
##     __printc "$fish_color_command" "curl"
##     __printc "normal" " "
##     __printc "$fish_color_autosuggestion" "http://www.google.com/"
##     __clear_newline
## 
##     __printc "$desc_color" "\nCompletions\n"
##     __dummy_prompt
##     __printc "$fish_color_command" "fish\n"
##     __printc "$fish_pager_color_prefix" "fish"
##     __printc "normal" "                               "
##     __printc "$fish_pager_color_description" "(Executable link, 901kB)"
##     __clear_newline
##     __printc "$fish_pager_color_prefix" "fish"
##     __printc "$fish_pager_color_completion" "_config"
##     __clear_newline
##     set_color $fish_color_search_match; set_color --bold white
##     printf "fish"
##     __printc "$fish_color_search_match" "_default_key_bindings"
##     __printc "$fish_color_search_match" "     "
##     set_color $fish_color_search_match $fish_pager_color_description
##     printf "(Default (Emacs-like) key b…)"
##     __clear_newline
##     __printc "$fish_pager_color_progress" "…and 16 more rows"
##     __clear_newline
## 
##     __printc "$desc_color" "\nComments\n"
##     __dummy_prompt
##     __printc "$fish_color_command" "say"
##     __printc "normal" " "
##     __printc "$fish_color_param" "hello"
##     __printc "normal" " "
##     __printc "$fish_color_comment" "# Your Mac will speak"
##     __clear_newline
## 
##     __printc "$desc_color" "\nOperators (like '*' and '~'), Separators (like ';' and '&')\n"
##     __dummy_prompt
##     __printc "$fish_color_command" "mv"
##     __printc "normal" " "
##     __printc "$fish_color_param" "foo/"
##     __printc "$fish_color_operator" "*"
##     __printc "normal" " "
##     set_color $fish_color_param; set_color $fish_color_valid_path; printf "bar/"
##     __printc "$fish_color_end" ";"
##     __clear_newline
## 
##     __printc "$desc_color" "\nRedirection\n"
##     __dummy_prompt
##     __printc "$fish_color_command" "brew"
##     __printc "normal" " "
##     __printc "$fish_color_param" "update"
##     __printc "normal" " "
##     __printc "$fish_color_redirection" "2>"
##     __printc "normal" " "
##     __printc "$fish_color_redirection" "/dev/null"
##     __clear_newline
## 
##     __printc "$desc_color" "\nRoot prompt CWD\n"
##     __printc "$fish_color_cwd_root" "/root"
##     __printc normal "# "
##     __printc "$fish_color_command" "foo"
##     __clear_newline
## 
##     __printc "normal" "\n"
## }
## 
## function colors::variables(){
## 
##     function __print_variable -a color text
##         set -l text (printf "%-30s : $color" $text)
##         __printc "$color" "$text"
##         set_color -b normal; printf "\n"
##     end
## 
##     __printc "normal" "\n"
##     __print_variable "$fish_color_normal" "fish_color_normal"
##     __print_variable "$fish_color_command" "fish_color_command"
##     __print_variable "$fish_color_param" "fish_color_param"
##     __print_variable "$fish_color_redirection" "fish_color_redirection"
##     __print_variable "$fish_color_comment" "fish_color_comment"
##     __print_variable "$fish_color_error" "fish_color_error"
##     __print_variable "$fish_color_escape" "fish_color_escape"
##     __print_variable "$fish_color_operator" "fish_color_operator"
##     __print_variable "$fish_color_end" "fish_color_end"
##     __print_variable "$fish_color_quote" "fish_color_quote"
##     __print_variable "$fish_color_autosuggestion" "fish_color_autosuggestion"
##     __print_variable "$fish_color_valid_path" "fish_color_valid_path"
##     __print_variable "$fish_color_cwd" "fish_color_cwd"
##     __print_variable "$fish_color_cwd_root" "fish_color_cwd_root"
##     __print_variable "$fish_color_match" "fish_color_match"
##     __print_variable "$fish_color_search_match" "fish_color_search_match"
##     __print_variable "$fish_color_selection" "fish_color_selection"
##     __print_variable "$fish_pager_color_prefix" "fish_pager_color_prefix"
##     __print_variable "$fish_pager_color_completion" "fish_pager_color_completion"
##     __print_variable "$fish_pager_color_description" "fish_pager_color_description"
##     __print_variable "$fish_pager_color_progress" "fish_pager_color_progress"
##     __print_variable "$fish_pager_color_secondary" "fish_pager_color_secondary"
##     __print_variable "$fish_color_history_current" "fish_color_history_current"
##     __print_variable "$fish_color_user" "fish_color_user"
##     __print_variable "$fish_color_host" "fish_color_host"
##     __print_variable "$fish_color_cancel" "fish_color_cancel"
##     __printc "normal" "\n"
## }
## 
## function __printc -a color text
##     set_color normal
##     eval "set_color $color"
##     printf "$text"
## end

function colors::all(){
    colors::ansi
    colors::aixterm
    colors::256-colors
    colors::graphic
}

while [[ $# -gt 0 ]]; do
  case $1 in
    --examples)
      colors_examples
      shift # past argument
      ;;
    --variables)
      colors::variables
      shift # past argument
      ;;
    --graphic)
      colors::graphic
      shift # past argument
      ;;
    --ansi)
      colors::ansi
      shift # past argument
      ;;
    --aixterm)
      colors::aixterm
      shift # past argument
      ;;
    --256colors)
      colors::256-colors
      shift # past argument
      ;;
    --256hex)
      colors::256-hex
      shift # past argument
      ;;
    --all)
      colors::all
      shift # past argument
      ;;
    --help)
      colors::help
      shift # past argument
      ;;
    -*|--*)
      echo "Unknown option $1"
      colors::help
      exit 1
      ;;
    *)
      echo "Unknown option $1"
      colors::help
      shift # past argument
      ;;
  esac
done
